/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.paper2d;


/**
  A component that handles rendering and collision for many instances of one or more UPaperSprite assets.
  
  @see UPrimitiveComponent, UPaperSprite
**/
@:glueCppIncludes("PaperGroupedSpriteComponent.h")
@:uextern extern class UPaperGroupedSpriteComponent extends unreal.UMeshComponent {
  
  /**
    Array of instances
  **/
  private var PerInstanceSpriteData : unreal.TArray<unreal.paper2d.FSpriteInstanceData>;
  
  /**
    Array of materials used by the instances
  **/
  private var InstanceMaterials : unreal.TArray<unreal.UMaterialInterface>;
  
  /**
    Add an instance to this component. Transform can be given either in the local space of this component or world space.
  **/
  @:final public function AddInstance(Transform : unreal.Const<unreal.PRef<unreal.FTransform>>, Sprite : unreal.paper2d.UPaperSprite, bWorldSpace : Bool, Color : unreal.FLinearColor) : unreal.Int32;
  
  /**
    Get the transform for the instance specified. Instance is returned in local space of this component unless bWorldSpace is set.  Returns True on success.
  **/
  @:thisConst @:final public function GetInstanceTransform(InstanceIndex : unreal.Int32, OutInstanceTransform : unreal.PRef<unreal.FTransform>, bWorldSpace : Bool) : Bool;
  
  /**
    Update the transform for the instance specified. Instance is given in local space of this component unless bWorldSpace is set.  Returns True on success.
  **/
  public function UpdateInstanceTransform(InstanceIndex : unreal.Int32, NewInstanceTransform : unreal.Const<unreal.PRef<unreal.FTransform>>, bWorldSpace : Bool, bMarkRenderStateDirty : Bool, bTeleport : Bool) : Bool;
  
  /**
    Update the color for the instance specified. Returns True on success.
  **/
  public function UpdateInstanceColor(InstanceIndex : unreal.Int32, NewInstanceColor : unreal.FLinearColor, bMarkRenderStateDirty : Bool) : Bool;
  
  /**
    Remove the instance specified. Returns True on success.
  **/
  public function RemoveInstance(InstanceIndex : unreal.Int32) : Bool;
  
  /**
    Clear all instances being rendered by this component
  **/
  public function ClearInstances() : Void;
  
  /**
    Get the number of instances in this component
  **/
  @:thisConst @:final public function GetInstanceCount() : unreal.Int32;
  
  /**
    Sort all instances by their world space position along the specified axis
  **/
  @:final public function SortInstancesAlongAxis(WorldSpaceSortAxis : unreal.FVector) : Void;
  
}
