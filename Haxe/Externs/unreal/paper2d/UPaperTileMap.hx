/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.paper2d;


/**
  A tile map is a 2D grid with a defined width and height (in tiles).  There can be multiple layers, each of which can specify which tile should appear in each cell of the map for that layer.
**/
@:glueCppIncludes("PaperTileMap.h")
@:uextern extern class UPaperTileMap extends unreal.UObject {
  
  /**
    The naming index to start at when trying to create a new layer
  **/
  public var LayerNameIndex : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    The background color displayed in the tile map editor
  **/
  public var BackgroundColor : unreal.FLinearColor;
  
  /**
    The currently selected layer index
  **/
  public var SelectedLayerIndex : unreal.Int32;
  
  /**
    Importing data and options used for this tile map
  **/
  public var AssetImportData : unreal.UAssetImportData;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Baked physics data.
  **/
  public var BodySetup : unreal.UBodySetup;
  
  /**
    The vertical height of the sides of the hex cell for a tile.
    Note: This value should already be included as part of the TileHeight, and is purely cosmetic; it only affects how the tile cursor preview is drawn.
  **/
  public var HexSideLength : unreal.Int32;
  
  /**
    Tile map type
  **/
  public var ProjectionMode : unreal.paper2d.ETileMapProjectionMode;
  
  /**
    Collision domain (no collision, 2D, or 3D)
  **/
  private var SpriteCollisionDomain : unreal.paper2d.ESpriteCollisionMode;
  
  /**
    The extrusion thickness of collision geometry when using a 3D collision domain
  **/
  private var CollisionThickness : unreal.Float32;
  
  /**
    The list of layers
  **/
  public var TileLayers : unreal.TArray<unreal.paper2d.UPaperTileLayer>;
  
  /**
    The material to use on a tile map instance if not overridden
  **/
  public var Material : unreal.UMaterialInterface;
  
  /**
    The Z-separation between each layer of the tile map
  **/
  public var SeparationPerLayer : unreal.Float32;
  
  /**
    The Z-separation incurred as you travel in Y (not strictly applied, batched tiles will be put at the same Z level)
  **/
  public var SeparationPerTileY : unreal.Float32;
  
  /**
    The Z-separation incurred as you travel in X (not strictly applied, batched tiles will be put at the same Z level)
  **/
  public var SeparationPerTileX : unreal.Float32;
  
  /**
    The scaling factor between pixels and Unreal units (cm) (e.g., 0.64 would make a 64 pixel wide tile take up 100 cm)
  **/
  public var PixelsPerUnrealUnit : unreal.Float32;
  
  /**
    Height of one tile (in pixels)
  **/
  public var TileHeight : unreal.Int32;
  
  /**
    Width of one tile (in pixels)
  **/
  public var TileWidth : unreal.Int32;
  
  /**
    Height of map (in tiles)
  **/
  public var MapHeight : unreal.Int32;
  
  /**
    Width of map (in tiles)
  **/
  public var MapWidth : unreal.Int32;
  
}
