/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  A material that is rendered onto the surface of a mesh. A kind of 'bumper sticker' for a model.
  
  @see https://docs.unrealengine.com/latest/INT/Engine/Actors/DecalActor
  @see UDecalActor
**/
@:glueCppIncludes("Components/DecalComponent.h")
@:uextern extern class UDecalComponent extends unreal.USceneComponent {
  
  /**
    Decal size in local space (does not include the component scale), technically redundant but there for convenience
  **/
  public var DecalSize : unreal.FVector;
  
  /**
    Automatically destroys the owning actor after fully fading out.
  **/
  public var bDestroyOwnerAfterFade : Bool;
  
  /**
    Time in seconds for the decal to fade out. Set fade duration and start delay to 0 to make persistent.
  **/
  public var FadeDuration : unreal.Float32;
  
  /**
    Time in seconds to wait before beginning to fade out the decal. Set fade duration and start delay to 0 to make persistent.
  **/
  public var FadeStartDelay : unreal.Float32;
  public var FadeScreenSize : unreal.Float32;
  
  /**
    Controls the order in which decal elements are rendered.  Higher values draw later (on top).
    Setting many different sort orders on many different decals prevents sorting by state and can reduce performance.
  **/
  public var SortOrder : unreal.Int32;
  
  /**
    Decal material.
  **/
  public var DecalMaterial : unreal.UMaterialInterface;
  @:thisConst @:final public function GetFadeStartDelay() : unreal.Float32;
  @:thisConst @:final public function GetFadeDuration() : unreal.Float32;
  
  /**
    Sets the decal's fade start time, duration and if the owning actor should be destroyed after the decal is fully faded out.
    The default value of 0 for FadeStartDelay and FadeDuration makes the decal persistent. See DecalLifetimeOpacity material
    node to control the look of "fading out."
    
    @param StartDelay - Time in seconds to wait before beginning to fade out the decal.
    @param Duration - Time in second for the decal to fade out.
    @param DestroyOwnerAfterFade - Should the owning actor automatically be destroyed after it is completely faded out.
  **/
  @:final public function SetFadeOut(StartDelay : unreal.Float32, Duration : unreal.Float32, DestroyOwnerAfterFade : Bool) : Void;
  
  /**
    Sets the sort order for the decal component. Higher values draw later (on top). This will force the decal to reattach
  **/
  @:final public function SetSortOrder(Value : unreal.Int32) : Void;
  
  /**
    setting decal material on decal component. This will force the decal to reattach
  **/
  @:final public function SetDecalMaterial(NewDecalMaterial : unreal.UMaterialInterface) : Void;
  
  /**
    Accessor for decal material
  **/
  @:thisConst @:final public function GetDecalMaterial() : unreal.UMaterialInterface;
  
  /**
    Utility to allocate a new Dynamic Material Instance, set its parent to the currently applied material, and assign it
  **/
  public function CreateDynamicMaterialInstance() : unreal.UMaterialInstanceDynamic;
  
}
