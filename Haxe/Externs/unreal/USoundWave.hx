/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Sound/SoundWave.h")
@:uextern extern class USoundWave extends unreal.USoundBase {
  #if WITH_EDITORONLY_DATA
  public var AssetImportData : unreal.UAssetImportData;
  @:deprecated public var SourceFileTimestamp_DEPRECATED : unreal.FString;
  @:deprecated public var SourceFilePath_DEPRECATED : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The array of the subtitles for each language. Generated at cook time.
  **/
  public var LocalizedSubtitles : unreal.TArray<unreal.FLocalizedSubtitle>;
  #if WITH_EDITORONLY_DATA
  
  /**
    Provides contextual information for the sound to the translator.
  **/
  public var Comment : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,
    as the contents of the subtitle is commonly identical to what is spoken.
  **/
  public var Subtitles : unreal.TArray<unreal.FSubtitleCue>;
  
  /**
    Size of RawPCMData, or what RawPCMData would be if the sound was fully decompressed
  **/
  public var RawPCMDataSize : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    Sizes of the bulk data for the source wav data
  **/
  public var ChannelSizes : unreal.TArray<unreal.Int32>;
  
  /**
    Offsets into the bulk data for the source wav data
  **/
  public var ChannelOffsets : unreal.TArray<unreal.Int32>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Cached sample rate for displaying in the tools
  **/
  public var SampleRate : unreal.Int32;
  
  /**
    Number of channels of multichannel data; 1 or 2 for regular mono and stereo files
  **/
  public var NumChannels : unreal.Int32;
  
  /**
    Playback pitch for sound - Minimum is 0.4, maximum is 2.0 - it is a simple linear multiplier to the SampleRate.
  **/
  public var Pitch : unreal.Float32;
  
  /**
    Playback volume of sound 0 to 1 - Default is 1.0.
  **/
  public var Volume : unreal.Float32;
  
  /**
    The priority of the subtitle.
  **/
  public var SubtitlePriority : unreal.Float32;
  
  /**
    A localized version of the text that is actually spoken phonetically in the audio.
  **/
  public var SpokenText : unreal.FString;
  public var SoundGroup : unreal.ESoundGroup;
  
  /**
    Allows sound to play at 0 volume, otherwise will stop the sound when the sound is silent.
  **/
  public var bVirtualizeWhenSilent : Bool;
  
  /**
    If set to true the subtitles display as a sequence of single lines as opposed to multiline.
  **/
  public var bSingleLine : Bool;
  
  /**
    If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually.
  **/
  public var bManualWordWrap : Bool;
  
  /**
    If set to true if this sound is considered to contain mature/adult content.
  **/
  public var bMature : Bool;
  
  /**
    Priority of this sound when streaming (lower priority streams may not always play)
  **/
  public var StreamingPriority : unreal.Int32;
  
  /**
    Whether this sound can be streamed to avoid increased memory usage
  **/
  public var bStreaming : Bool;
  
  /**
    If set, when played directly (not through a sound cue) the wave will be played looping.
  **/
  public var bLooping : Bool;
  
  /**
    Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality.
  **/
  public var CompressionQuality : unreal.Int32;
  
}
