/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  AudioComponent is used to play a Sound
  
  @see https://docs.unrealengine.com/latest/INT/Audio/Overview/index.html
  @see USoundBase
**/
@:glueCppIncludes("Components/AudioComponent.h")
@:uextern extern class UAudioComponent extends unreal.USceneComponent {
  
  /**
    What sound concurrency to use for sounds generated by this audio component
  **/
  public var ConcurrencySettings : unreal.USoundConcurrency;
  
  /**
    If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component
  **/
  public var AttenuationOverrides : unreal.FAttenuationSettings;
  
  /**
    If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component
  **/
  public var AttenuationSettings : unreal.USoundAttenuation;
  
  /**
    The frequency of the lowpass filter (in hertz) to apply to this voice. A frequency of 0.0 is the device sample rate and will bypass the filter.
  **/
  public var LowPassFilterFrequency : unreal.Float32;
  @:deprecated public var HighFrequencyGainMultiplier_DEPRECATED : unreal.Float32;
  
  /**
    A pitch multiplier to apply to sounds generated by this component
  **/
  public var PitchMultiplier : unreal.Float32;
  @:deprecated public var VolumeWeightedPriorityScale_DEPRECATED : unreal.Float32;
  
  /**
    Used by the subtitle manager to prioritize subtitles wave instances spawned by this component.
  **/
  public var SubtitlePriority : unreal.Float32;
  
  /**
    A priority value that is used for sounds that play on this component that scales against final output volume.
  **/
  public var Priority : unreal.Float32;
  
  /**
    A volume multiplier to apply to sounds generated by this component
  **/
  public var VolumeMultiplier : unreal.Float32;
  
  /**
    The upper bound to use when randomly determining a volume multiplier
  **/
  public var VolumeModulationMax : unreal.Float32;
  
  /**
    The lower bound to use when randomly determining a volume multiplier
  **/
  public var VolumeModulationMin : unreal.Float32;
  
  /**
    The upper bound to use when randomly determining a pitch multiplier
  **/
  public var PitchModulationMax : unreal.Float32;
  
  /**
    The lower bound to use when randomly determining a pitch multiplier
  **/
  public var PitchModulationMin : unreal.Float32;
  
  /**
    If true, subtitles in the sound data will be ignored.
  **/
  public var bSuppressSubtitles : Bool;
  public var bOverridePriority : Bool;
  
  /**
    Whether or not to apply a low-pass filter to the sound that plays in this audio component.
  **/
  public var bEnableLowPassFilter : Bool;
  
  /**
    Whether or not this sound plays when the game is paused in the UI
  **/
  public var bIsUISound : Bool;
  
  /**
    Whether or not to override the sound's subtitle priority.
  **/
  public var bOverrideSubtitlePriority : Bool;
  
  /**
    Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
  **/
  public var bOverrideAttenuation : Bool;
  
  /**
    Is this audio component allowed to be spatialized?
  **/
  public var bAllowSpatialization : Bool;
  
  /**
    Whether the wave instances should remain active if they're dropped by the prioritization code. Useful for e.g. vehicle sounds that shouldn't cut out.
  **/
  public var bShouldRemainActiveIfDropped : Bool;
  
  /**
    Stop sound when owner is destroyed
  **/
  public var bStopWhenOwnerDestroyed : Bool;
  
  /**
    Auto destroy this component on completion
  **/
  public var bAutoDestroy : Bool;
  
  /**
    Optional sound group this AudioComponent belongs to
  **/
  public var SoundClassOverride : unreal.USoundClass;
  
  /**
    Array of per-instance parameters for this AudioComponent.
  **/
  public var InstanceParameters : unreal.TArray<unreal.FAudioComponentParam>;
  
  /**
    The sound to be played
  **/
  public var Sound : unreal.USoundBase;
  
  /**
    Set what sound is played by this component
  **/
  @:final public function SetSound(NewSound : unreal.USoundBase) : Void;
  
  /**
    This can be used in place of "play" when it is desired to fade in the sound over time.
    
    If FadeTime is 0.0, the change in volume is instant.
    If FadeTime is > 0.0, the multiplier will be increased from 0 to FadeVolumeLevel over FadeIn seconds.
    
    @param FadeInDuration how long it should take to reach the FadeVolumeLevel
    @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume to fade to
  **/
  @:final public function FadeIn(FadeInDuration : unreal.Float32, FadeVolumeLevel : unreal.Float32, StartTime : unreal.Float32) : Void;
  
  /**
    This is used in place of "stop" when it is desired to fade the volume of the sound before stopping.
    
    If FadeTime is 0.0, this is the same as calling Stop().
    If FadeTime is > 0.0, this will adjust the volume multiplier to FadeVolumeLevel over FadeInTime seconds
    and then stop the sound.
    
    @param FadeOutDuration how long it should take to reach the FadeVolumeLevel
    @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume in which to fade to
  **/
  @:final public function FadeOut(FadeOutDuration : unreal.Float32, FadeVolumeLevel : unreal.Float32) : Void;
  
  /**
    Start a sound playing on an audio component
  **/
  @:final public function Play(StartTime : unreal.Float32) : Void;
  
  /**
    Stop an audio component playing its sound cue, issue any delegates if needed
  **/
  @:final public function Stop() : Void;
  
  /**
    Pause an audio component playing its sound cue, issue any delegates if needed
  **/
  @:final public function SetPaused(bPause : Bool) : Void;
  
  /**
    @return true if this component is currently playing a SoundCue.
  **/
  @:thisConst @:final public function IsPlaying() : Bool;
  
  /**
    This will allow one to adjust the volume of an AudioComponent on the fly
  **/
  @:final public function AdjustVolume(AdjustVolumeDuration : unreal.Float32, AdjustVolumeLevel : unreal.Float32) : Void;
  
  /**
    Set a float instance parameter for use in sound cues played by this audio component
  **/
  @:final public function SetFloatParameter(InName : unreal.FName, InFloat : unreal.Float32) : Void;
  
  /**
    Set a sound wave instance parameter for use in sound cues played by this audio component
  **/
  @:final public function SetWaveParameter(InName : unreal.FName, InWave : unreal.USoundWave) : Void;
  
  /**
    Set a boolean instance parameter for use in sound cues played by this audio component
  **/
  @:final public function SetBoolParameter(InName : unreal.FName, InBool : Bool) : Void;
  
  /**
    Set an integer instance parameter for use in sound cues played by this audio component
  **/
  @:final public function SetIntParameter(InName : unreal.FName, InInt : unreal.Int32) : Void;
  
  /**
    Set a new volume multiplier
  **/
  @:final public function SetVolumeMultiplier(NewVolumeMultiplier : unreal.Float32) : Void;
  
  /**
    Set a new pitch multiplier
  **/
  @:final public function SetPitchMultiplier(NewPitchMultiplier : unreal.Float32) : Void;
  
  /**
    Set whether sounds generated by this audio component should be considered UI sounds
  **/
  @:final public function SetUISound(bInUISound : Bool) : Void;
  
  /**
    Modify the attenuation settings of the audio component
  **/
  @:final public function AdjustAttenuation(InAttenuationSettings : unreal.Const<unreal.PRef<unreal.FAttenuationSettings>>) : Void;
  @:final public function BP_GetAttenuationSettingsToApply(OutAttenuationSettings : unreal.PRef<unreal.FAttenuationSettings>) : Bool;
  
}
