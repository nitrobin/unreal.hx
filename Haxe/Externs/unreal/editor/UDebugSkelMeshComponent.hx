/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;


/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Animation/DebugSkelMeshComponent.h")
@:uextern extern class UDebugSkelMeshComponent extends unreal.USkeletalMeshComponent {
  
  /**
    Does this component use in game bounds or does it use bounds calculated from bones
  **/
  public var bIsUsingInGameBounds : Bool;
  public var SavedAnimScriptInstance : unreal.UAnimInstance;
  public var PreviewInstance : unreal.animgraph.UAnimPreviewInstance;
  
  /**
    Array of materials to restore when not rendering blend weights
  **/
  public var SkelMaterials : unreal.TArray<unreal.UMaterialInterface>;
  
  /**
    Array of morphtargets to render verts for
  **/
  public var MorphTargetOfInterests : unreal.TArray<unreal.UMorphTarget>;
  
  /**
    Array of bones to render bone weights for
  **/
  public var BonesOfInterest : unreal.TArray<unreal.Int32>;
  public var bPreviewRootMotion : Bool;
  
  /**
    Display Bound *
  **/
  public var bDisplayBound : Bool;
  
  /**
    Display source animation pose
  **/
  public var bDisplaySourceAnimation : Bool;
  
  /**
    Display baked animation pose
  **/
  public var bDisplayBakedAnimation : Bool;
  
  /**
    Display additive base bone transform
  **/
  public var bDisplayAdditiveBasePose : Bool;
  
  /**
    Display non retargeted animation pose
  **/
  public var bDisplayNonRetargetedPose : Bool;
  
  /**
    Display raw animation bone transform
  **/
  public var bDisplayRawAnimation : Bool;
  
  /**
    Mesh sockets visible?
  **/
  public var bMeshSocketsVisible : Bool;
  
  /**
    Skeleton sockets visible?
  **/
  public var bSkeletonSocketsVisible : Bool;
  
  /**
    Socket hit points viewing
  **/
  public var bDrawSockets : Bool;
  
  /**
    Vertex binormal viewing
  **/
  public var bDrawBinormals : Bool;
  
  /**
    Vertex tangent viewing
  **/
  public var bDrawTangents : Bool;
  
  /**
    Vertex normal viewing
  **/
  public var bDrawNormals : Bool;
  
  /**
    Morphtarget viewing
  **/
  public var bDrawMorphTargetVerts : Bool;
  
  /**
    Bone influences viewing
  **/
  public var bDrawBoneInfluences : Bool;
  
  /**
    If true then the bone names associated with the skeletal mesh are displayed
  **/
  public var bShowBoneNames : Bool;
  
  /**
    If true then the skeletal mesh associated with the component is drawn.
  **/
  public var bDrawMesh : Bool;
  
  /**
    If true, render a wireframe skeleton of the mesh animated with the raw (uncompressed) animation data.
  **/
  public var bRenderRawSkeleton : Bool;
  
}
