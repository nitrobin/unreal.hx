/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplayabilities;


/**
  Wait for targeting actor (spawned from parameter) to provide data. Can be set not to end upon outputting data. Can be ended by task name.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("Abilities/Tasks/AbilityTask_WaitTargetData.h")
@:uextern extern class UAbilityTask_WaitTargetData extends unreal.gameplayabilities.UAbilityTask {
  
  /**
    The TargetActor that we spawned
  **/
  private var TargetActor : unreal.gameplayabilities.AGameplayAbilityTargetActor;
  @:final public function OnTargetDataReplicatedCallback(Data : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>, ActivationTag : unreal.gameplaytags.FGameplayTag) : Void;
  @:final public function OnTargetDataReplicatedCancelledCallback() : Void;
  @:final public function OnTargetDataReadyCallback(Data : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>) : Void;
  @:final public function OnTargetDataCancelledCallback(Data : unreal.Const<unreal.PRef<unreal.gameplayabilities.FGameplayAbilityTargetDataHandle>>) : Void;
  
  /**
    Spawns target actor and waits for it to return valid data or to be canceled.
  **/
  static public function WaitTargetData(WorldContextObject : unreal.UObject, TaskInstanceName : unreal.FName, ConfirmationType : unreal.gameplayabilities.EGameplayTargetingConfirmation, Class : unreal.TSubclassOf<unreal.gameplayabilities.AGameplayAbilityTargetActor>) : unreal.gameplayabilities.UAbilityTask_WaitTargetData;
  
  /**
    Uses specified target actor and waits for it to return valid data or to be canceled.
  **/
  static public function WaitTargetDataUsingActor(WorldContextObject : unreal.UObject, TaskInstanceName : unreal.FName, ConfirmationType : unreal.gameplayabilities.EGameplayTargetingConfirmation, TargetActor : unreal.gameplayabilities.AGameplayAbilityTargetActor) : unreal.gameplayabilities.UAbilityTask_WaitTargetData;
  @:final public function BeginSpawningActor(WorldContextObject : unreal.UObject, Class : unreal.TSubclassOf<unreal.gameplayabilities.AGameplayAbilityTargetActor>, SpawnedActor : unreal.PRef<unreal.gameplayabilities.AGameplayAbilityTargetActor>) : Bool;
  @:final public function FinishSpawningActor(WorldContextObject : unreal.UObject, SpawnedActor : unreal.gameplayabilities.AGameplayAbilityTargetActor) : Void;
  
}
