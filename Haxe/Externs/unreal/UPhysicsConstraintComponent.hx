/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  This is effectively a joint that allows you to connect 2 rigid bodies together. You can create different types of joints using the various parameters of this component.
**/
@:glueCppIncludes("PhysicsEngine/PhysicsConstraintComponent.h")
@:uextern extern class UPhysicsConstraintComponent extends unreal.USceneComponent {
  
  /**
    All constraint settings
  **/
  public var ConstraintInstance : unreal.FConstraintInstance;
  @:deprecated public var ConstraintSetup_DEPRECATED : unreal.UPhysicsConstraintTemplate;
  
  /**
    Name of second component property to constrain. If Actor2 is NULL, will look within Owner.
    If this is NULL, will use RootComponent of Actor2
  **/
  public var ComponentName2 : unreal.FConstrainComponentPropName;
  
  /**
    Pointer to second Actor to constrain.
  **/
  public var ConstraintActor2 : unreal.AActor;
  
  /**
    Name of first component property to constrain. If Actor1 is NULL, will look within Owner.
    If this is NULL, will use RootComponent of Actor1
  **/
  public var ComponentName1 : unreal.FConstrainComponentPropName;
  
  /**
    Pointer to first Actor to constrain.
  **/
  public var ConstraintActor1 : unreal.AActor;
  
  /**
    Directly specify component to connect. Will update frames based on current position.
  **/
  @:final public function SetConstrainedComponents(Component1 : unreal.UPrimitiveComponent, BoneName1 : unreal.FName, Component2 : unreal.UPrimitiveComponent, BoneName2 : unreal.FName) : Void;
  
  /**
    Break this constraint
  **/
  @:final public function BreakConstraint() : Void;
  
  /**
    Enables/Disables linear position drive
    
        @param bEnableDriveX    Indicates whether the drive for the X-Axis should be enabled
        @param bEnableDriveY    Indicates whether the drive for the Y-Axis should be enabled
        @param bEnableDriveZ    Indicates whether the drive for the Z-Axis should be enabled
  **/
  @:final public function SetLinearPositionDrive(bEnableDriveX : Bool, bEnableDriveY : Bool, bEnableDriveZ : Bool) : Void;
  
  /**
    Enables/Disables linear position drive
    
        @param bEnableDriveX    Indicates whether the drive for the X-Axis should be enabled
        @param bEnableDriveY    Indicates whether the drive for the Y-Axis should be enabled
        @param bEnableDriveZ    Indicates whether the drive for the Z-Axis should be enabled
  **/
  @:final public function SetLinearVelocityDrive(bEnableDriveX : Bool, bEnableDriveY : Bool, bEnableDriveZ : Bool) : Void;
  
  /**
    Enables/Disables angular orientation drive
    
        @param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled
        @param bEnableTwistDrive        Indicates whether the drive for the twist axis should be enabled
  **/
  @:final public function SetAngularOrientationDrive(bEnableSwingDrive : Bool, bEnableTwistDrive : Bool) : Void;
  
  /**
    Enables/Disables angular velocity drive
    
        @param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled
        @param bEnableTwistDrive        Indicates whether the drive for the twit axis should be enabled
  **/
  @:final public function SetAngularVelocityDrive(bEnableSwingDrive : Bool, bEnableTwistDrive : Bool) : Void;
  
  /**
    Sets the target position for the linear drive.
        @param InPosTarget              Target position
  **/
  @:final public function SetLinearPositionTarget(InPosTarget : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    Sets the target velocity for the linear drive.
        @param InVelTarget              Target velocity
  **/
  @:final public function SetLinearVelocityTarget(InVelTarget : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    Sets the drive params for the linear drive.
        @param InSpring         Spring force for the drive
        @param InDamping        Damping of the drive
        @param InForceLimit     Max force applied by the drive
  **/
  @:final public function SetLinearDriveParams(InSpring : unreal.Float32, InDamping : unreal.Float32, InForceLimit : unreal.Float32) : Void;
  
  /**
    Sets the target orientation for the angular drive.
        @param InPosTarget              Target orientation
  **/
  @:final public function SetAngularOrientationTarget(InPosTarget : unreal.Const<unreal.PRef<unreal.FRotator>>) : Void;
  
  /**
    Sets the target velocity for the angular drive.
        @param InVelTarget              Target velocity
  **/
  @:final public function SetAngularVelocityTarget(InVelTarget : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    Sets the drive params for the angular drive.
        @param InSpring         Spring force for the drive
        @param InDamping        Damping of the drive
        @param InForceLimit     Max force applied by the drive
  **/
  @:final public function SetAngularDriveParams(InSpring : unreal.Float32, InDamping : unreal.Float32, InForceLimit : unreal.Float32) : Void;
  
  /**
    Sets the LinearX Motion Type
         @param ConstraintType   New Constraint Type
         @param LimitSize                Size of limit
  **/
  @:final public function SetLinearXLimit(ConstraintType : unreal.ELinearConstraintMotion, LimitSize : unreal.Float32) : Void;
  
  /**
    Sets the LinearY Motion Type
         @param ConstraintType   New Constraint Type
         @param LimitSize                Size of limit
  **/
  @:final public function SetLinearYLimit(ConstraintType : unreal.ELinearConstraintMotion, LimitSize : unreal.Float32) : Void;
  
  /**
    Sets the LinearZ Motion Type
         @param ConstraintType   New Constraint Type
         @param LimitSize                Size of limit
  **/
  @:final public function SetLinearZLimit(ConstraintType : unreal.ELinearConstraintMotion, LimitSize : unreal.Float32) : Void;
  
  /**
    Sets the Angular Swing1 Motion Type
         @param ConstraintType   New Constraint Type
         @param Swing1LimitAngle Size of limit in degrees
  **/
  @:final public function SetAngularSwing1Limit(MotionType : unreal.EAngularConstraintMotion, Swing1LimitAngle : unreal.Float32) : Void;
  
  /**
    Sets the Angular Swing2 Motion Type
         @param ConstraintType   New Constraint Type
         @param Swing2LimitAngle Size of limit in degrees
  **/
  @:final public function SetAngularSwing2Limit(MotionType : unreal.EAngularConstraintMotion, Swing2LimitAngle : unreal.Float32) : Void;
  
  /**
    Sets the Angular Twist Motion Type
         @param ConstraintType   New Constraint Type
         @param TwistLimitAngle  Size of limit in degrees
  **/
  @:final public function SetAngularTwistLimit(ConstraintType : unreal.EAngularConstraintMotion, TwistLimitAngle : unreal.Float32) : Void;
  
  /**
    Gets the current Angular Twist of the constraint
  **/
  @:thisConst @:final public function GetCurrentTwist() : unreal.Float32;
  
  /**
    Gets the current Swing1 of the constraint
  **/
  @:thisConst @:final public function GetCurrentSwing1() : unreal.Float32;
  
  /**
    Gets the current Swing2 of the constraint
  **/
  @:thisConst @:final public function GetCurrentSwing2() : unreal.Float32;
  
  /**
    Pass in reference frame in. If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.
  **/
  @:final public function SetConstraintReferenceFrame(Frame : unreal.EConstraintFrame, RefFrame : unreal.Const<unreal.PRef<unreal.FTransform>>) : Void;
  
  /**
    Pass in reference position in (maintains reference orientation). If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.
  **/
  @:final public function SetConstraintReferencePosition(Frame : unreal.EConstraintFrame, RefPosition : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    Pass in reference orientation in (maintains reference position). If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.
  **/
  @:final public function SetConstraintReferenceOrientation(Frame : unreal.EConstraintFrame, PriAxis : unreal.Const<unreal.PRef<unreal.FVector>>, SecAxis : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    If true, the collision between the two rigid bodies of the constraint will be disabled.
  **/
  @:final public function SetDisableCollision(bDisableCollision : Bool) : Void;
  
  /**
    Retrieve the constraint force most recently applied to maintain this constraint. Returns 0 forces if the constraint is not initialized or broken.
  **/
  @:final public function GetConstraintForce(OutLinearForce : unreal.PRef<unreal.FVector>, OutAngularForce : unreal.PRef<unreal.FVector>) : Void;
  
}
