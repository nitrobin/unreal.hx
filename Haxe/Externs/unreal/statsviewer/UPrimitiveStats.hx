/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.statsviewer;


/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  Statistics page for primitives.
**/
@:umodule("StatsViewer")
@:glueCppIncludes("PrimitiveStats.h")
@:uextern extern class UPrimitiveStats extends unreal.UObject {
  
  /**
    Average radius of bounding sphere of instance in map
  **/
  public var RadiusAvg : unreal.Float32;
  
  /**
    Maximum radius of bounding sphere of instance in map
  **/
  public var RadiusMax : unreal.Float32;
  
  /**
    Minimum radius of bounding sphere of instance in map
  **/
  public var RadiusMin : unreal.Float32;
  
  /**
    Light/shadow map resolution
  **/
  public var LMSMResolution : unreal.Float32;
  
  /**
    Light map data in KB
  **/
  public var LightMapData : unreal.Float32;
  
  /**
    Avg OL * Sections
  **/
  public var ObjLightCost : unreal.Float32;
  
  /**
    (Avg OL + Avg LM) / Count
  **/
  public var LightsTotal : unreal.Float32;
  
  /**
    Average number of other lights relevant to each instance
  **/
  public var LightsOther : unreal.Float32;
  
  /**
    Average number of lightmap lights relevant to each instance
  **/
  public var LightsLM : unreal.Int32;
  
  /**
    Per component vertex color stat for static meshes in KB
  **/
  public var InstVertexColorMem : unreal.Float32;
  
  /**
    Vertex color stat for static and skeletal meshes in KB
  **/
  public var VertexColorMem : unreal.Float32;
  
  /**
    Resource size in KB
  **/
  public var ResourceSize : unreal.Float32;
  
  /**
    Triangle count of all mesh occurances (Count * Tris)
  **/
  public var InstTriangles : unreal.Int32;
  
  /**
    Triangle count of mesh
  **/
  public var Triangles : unreal.Int32;
  
  /**
    Instanced section count of mesh
  **/
  public var InstSections : unreal.Int32;
  
  /**
    Section count of mesh
  **/
  public var Sections : unreal.Int32;
  
  /**
    Number of occurrences in map
  **/
  public var Count : unreal.Int32;
  
  /**
    Type name
  **/
  public var Type : unreal.FString;
  
}
