/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  NavMovementComponent defines base functionality for MovementComponents that move any 'agent' that may be involved in AI pathfinding.
**/
@:glueCppIncludes("GameFramework/NavMovementComponent.h")
@:uextern extern class UNavMovementComponent extends unreal.UMovementComponent {
  
  /**
    Expresses runtime state of character's movement. Put all temporal changes to movement properties here
  **/
  public var MovementState : unreal.FMovementProperties;
  
  /**
    Braking distance override used with acceleration driven path following (bUseAccelerationForPaths)
  **/
  private var FixedPathBrakingDistance : unreal.Float32;
  
  /**
    Properties that define how the component can move.
  **/
  public var NavAgentProps : unreal.FNavAgentProperties;
  
  /**
    Stops applying further movement (usually zeros acceleration).
  **/
  public function StopActiveMovement() : Void;
  
  /**
    Stops movement immediately (reset velocity) but keeps following current path
  **/
  @:final public function StopMovementKeepPathing() : Void;
  
  /**
    @return true if currently crouching
  **/
  @:thisConst public function IsCrouching() : Bool;
  
  /**
    @return true if currently falling (not flying, in a non-fluid volume, and not on the ground)
  **/
  @:thisConst public function IsFalling() : Bool;
  
  /**
    @return true if currently moving on the ground (e.g. walking or driving)
  **/
  @:thisConst public function IsMovingOnGround() : Bool;
  
  /**
    @return true if currently swimming (moving through a fluid volume)
  **/
  @:thisConst public function IsSwimming() : Bool;
  
  /**
    @return true if currently flying (moving through a non-fluid volume without resting on the ground)
  **/
  @:thisConst public function IsFlying() : Bool;
  
}
