/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.landscape;


/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("LandscapeProxy.h")
@:uextern extern class ALandscapeProxy extends unreal.AActor {
  
  /**
    Flag whether or not this Landscape's surface can be used for culling hidden triangles *
  **/
  public var bUseLandscapeForCullingInvisibleHLODVertices : Bool;
  #if WITH_EDITORONLY_DATA
  public var MaxPaintedLayersPerComponent : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  public var NavigationGeometryGatheringMode : unreal.ENavDataGatheringMode;
  
  /**
    Hints navigation system whether this landscape will ever be navigated on. true by default, but make sure to set it to false for faraway, background landscapes
  **/
  public var bUsedForNavigation : Bool;
  
  /**
    Number of quads for a subsection of a component. SubsectionSizeQuads+1 must be a power of two.
  **/
  public var NumSubsections : unreal.Int32;
  
  /**
    Total number of quads in each component
  **/
  public var SubsectionSizeQuads : unreal.Int32;
  
  /**
    Data set at creation time
  **/
  public var ComponentSizeQuads : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  public var EditorLayerSettings : unreal.TArray<unreal.landscape.FLandscapeEditorLayerSettings>;
  public var ReimportHeightmapFilePath : unreal.FString;
  @:deprecated public var EditorCachedLayerInfos_DEPRECATED : unreal.TArray<unreal.landscape.ULandscapeLayerInfoObject>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Whether to bake the landscape material's vertical world position offset into the collision heightfield.
                  Note: Only z (vertical) offset is supported. XY offsets are ignored.
                  Does not work with an XY offset map (mesh collision)
  **/
  public var bBakeMaterialPositionOffsetIntoCollision : Bool;
  
  /**
    If true, Landscape will generate overlap events when other components are overlapping it (eg Begin Overlap).
    Both the Landscape and the other component must have this flag enabled for overlap events to occur.
    
    @see [Overlap Events](https://docs.unrealengine.com/latest/INT/Engine/Physics/Collision/index.html#overlapandgenerateoverlapevents)
    @see UpdateOverlaps(), BeginComponentOverlap(), EndComponentOverlap()
  **/
  public var bGenerateOverlapEvents : Bool;
  
  /**
    Collision profile settings for this landscape
  **/
  public var BodyInstance : unreal.FBodyInstance;
  
  /**
    Thickness of the collision surface, in unreal units
  **/
  public var CollisionThickness : unreal.Float32;
  
  /**
    If set higher than the "Collision Mip Level", this specifies the Landscape LOD to use for "simple collision" tests, otherwise the "Collision Mip Level" is used for both simple and complex collision.
    Does not work with an XY offset map (mesh collision)
  **/
  public var SimpleCollisionMipLevel : unreal.Int32;
  
  /**
    Landscape LOD to use for collision tests. Higher numbers use less memory and process faster, but are much less accurate
  **/
  public var CollisionMipLevel : unreal.Int32;
  
  /**
    The Lightmass settings for this object.
  **/
  public var LightmassSettings : unreal.FLightmassPrimitiveSettings;
  #if WITH_EDITORONLY_DATA
  public var bIsMovingToLevel : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Whether to use the landscape material's vertical world position offset when calculating static lighting.
                  Note: Only z (vertical) offset is supported. XY offsets are ignored.
                  Does not work correctly with an XY offset map (mesh collision)
  **/
  public var bUseMaterialPositionOffsetInStaticLighting : Bool;
  
  /**
    Whether this primitive should cast shadows in the far shadow cascades.
  **/
  public var bCastFarShadow : Bool;
  
  /**
    Whether this primitive should cast dynamic shadows as if it were a two sided material.
  **/
  public var bCastShadowAsTwoSided : Bool;
  public var bCastStaticShadow : Bool;
  
  /**
    The resolution to cache lighting at, in texels/quad in one axis
    Total resolution would be changed by StaticLightingResolution*StaticLightingResolution
    Automatically calculate proper value for removing seams
  **/
  public var StaticLightingResolution : unreal.Float32;
  
  /**
    Only used outside of the editor (e.g. in cooked builds)
    Disables landscape grass processing entirely if no landscape components have landscape grass configured
  **/
  public var bHasLandscapeGrass : Bool;
  public var FoliageComponents : unreal.TArray<unreal.UHierarchicalInstancedStaticMeshComponent>;
  
  /**
    Array of LandscapeHeightfieldCollisionComponent
  **/
  public var CollisionComponents : unreal.TArray<unreal.landscape.ULandscapeHeightfieldCollisionComponent>;
  
  /**
    The array of LandscapeComponent that are used by the landscape
  **/
  public var LandscapeComponents : unreal.TArray<unreal.landscape.ULandscapeComponent>;
  
  /**
    Allows overriding the landscape bounds. This is useful if you distort the landscape with world-position-offset, for example
    Extension value in the positive Z axis, positive value increases bound size
    Note that this can also be overridden per-component when the component is selected with the component select tool
  **/
  public var PositiveZBoundsExtension : unreal.Float32;
  
  /**
    Allows overriding the landscape bounds. This is useful if you distort the landscape with world-position-offset, for example
    Extension value in the negative Z axis, positive value increases bound size
    Note that this can also be overridden per-component when the component is selected with the component select tool
  **/
  public var NegativeZBoundsExtension : unreal.Float32;
  
  /**
    Material used to render landscape components with holes. If not set, LandscapeMaterial will be used (blend mode will be overridden to Masked if it is set to Opaque)
  **/
  public var LandscapeHoleMaterial : unreal.UMaterialInterface;
  
  /**
    Combined material used to render the landscape
  **/
  public var LandscapeMaterial : unreal.UMaterialInterface;
  
  /**
    Allows artists to adjust the distance where textures using UV 0 are streamed in/out.
    1.0 is the default, whereas a higher value increases the streamed-in resolution.
    Value can be < 0 (from legcay content, or code changes)
  **/
  public var StreamingDistanceMultiplier : unreal.Float32;
  
  /**
    Default physical material, used when no per-layer values physical materials
  **/
  public var DefaultPhysMaterial : unreal.UPhysicalMaterial;
  
  /**
    LOD level to use when running lightmass (increase to 1 or 2 for large landscapes to stop lightmass crashing)
  **/
  public var StaticLightingLOD : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    LOD level to use when exporting the landscape to obj or FBX
  **/
  public var ExportLOD : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  public var LODFalloff : unreal.landscape.ELandscapeLODFalloff;
  public var LODDistanceFactor : unreal.Float32;
  
  /**
    Max LOD level to use when rendering, -1 means the max available
  **/
  public var MaxLODLevel : unreal.Int32;
  
  /**
    Offset in quads from global components grid origin (in quads) *
  **/
  public var LandscapeSectionOffset : unreal.FIntPoint;
  
  /**
    Guid for LandscapeEditorInfo *
  **/
  private var LandscapeGuid : unreal.FGuid;
  public var SplineComponent : unreal.landscape.ULandscapeSplinesComponent;
  
}
