/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mediaassets;


/**
  Implements a media play list.
**/
@:umodule("MediaAssets")
@:glueCppIncludes("MediaPlaylist.h")
@:uextern extern class UMediaPlaylist extends unreal.UObject {
  
  /**
    Add a media source to the play list.
    
    @param MediaSource The media source to append.
    @see Insert, RemoveAll, Remove
  **/
  @:final public function Add(MediaSource : unreal.mediaassets.UMediaSource) : Void;
  
  /**
    Get the media source at the specified index.
    
    @param Index The index of the media source to get.
    @return The media source, or nullptr if the index doesn't exist.
    @see GetNext, GetRandom
  **/
  @:final public function Get(Index : unreal.Int32) : unreal.mediaassets.UMediaSource;
  
  /**
    Get the next media source in the play list.
    
    @param InOutIndex Index of the current media source (will contain the new index).
    @return The media source after the current one, or nullptr if the list is empty.
    @see , GetPrevious, GetRandom
  **/
  @:final public function GetNext(InOutIndex : unreal.Int32) : unreal.mediaassets.UMediaSource;
  
  /**
    Get the previous media source in the play list.
    
    @param InOutIndex Index of the current media source (will contain the new index).
    @return The media source before the current one, or nullptr if the list is empty.
    @see , GetNext, GetRandom
  **/
  @:final public function GetPrevious(InOutIndex : unreal.Int32) : unreal.mediaassets.UMediaSource;
  
  /**
    Get a random media source in the play list.
    
    @param InOutIndex Index of the current media source (will contain the new index).
    @return The random media source, or nullptr if the list is empty.
    @see Get, GetNext, GetPrevious
  **/
  @:final public function GetRandom(InOutIndex : unreal.Int32) : unreal.mediaassets.UMediaSource;
  
  /**
    Insert a media source into the play list at the given position.
    
    @param MediaSource The media source to insert.
    @param Index The index to insert into.
    @see Add, Remove, RemoveAll
  **/
  @:final public function Insert(MediaSource : unreal.mediaassets.UMediaSource, Index : unreal.Int32) : Void;
  
  /**
    Get the number of media sources in the play list.
    
    @return Number of media sources.
  **/
  @:final public function Num() : unreal.Int32;
  
  /**
    Remove all occurrences of the given media source in the play list.
    
    @param MediaSource The media source to remove.
    @see Add, Insert, Remove
  **/
  @:final public function Remove(MediaSource : unreal.mediaassets.UMediaSource) : Void;
  
  /**
    Remove the media source at the specified position.
    
    @param Index The index of the media source to remove.
    @see Add, Insert, RemoveAll
  **/
  @:final public function RemoveAt(Index : unreal.Int32) : Void;
  
  /**
    List of media sources to play.
  **/
  private var Items : unreal.TArray<unreal.mediaassets.UMediaSource>;
  
}
