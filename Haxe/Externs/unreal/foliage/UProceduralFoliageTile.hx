/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.foliage;


/**
  Procedurally determines where to spawn foliage meshes within a discrete area.
  Generally, a procedural foliage simulation as a whole is composed of multiple tiles.
  Tiles are able to overlap one another as well to create a seamless appearance.
  
  Note that the tile is not responsible for actually spawning any instances, it only determines where they should be placed.
  Following a simulation, call ExtractDesiredInstances for information about where each instance should spawn.
  
  Note also that, barring any core changes to the ordering of TSet, foliage generation is deterministic
  (i.e. given the same inputs, the result of the simulation will always be the same).
**/
@:glueCppIncludes("ProceduralFoliageTile.h")
@:uextern extern class UProceduralFoliageTile extends unreal.UObject {
  
}
