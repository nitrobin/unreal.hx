/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  WARNING: This type is defined as NoExport by UHT. It will be empty because of it
  
  
**/
@:glueCppIncludes("Camera/PlayerCameraManager.h")
@:noCopy @:noEquals @:uextern extern class FMinimalViewInfo {
  
  /**
    Off-axis / off-center projection offset as proportion of screen dimensions
  **/
  public var OffCenterProjectionOffset : unreal.FVector2D;
  
  /**
    Post-process settings to use if PostProcessBlendWeight is non-zero.
  **/
  public var PostProcessSettings : unreal.FPostProcessSettings;
  
  /**
    Indicates if PostProcessSettings should be applied.
  **/
  public var PostProcessBlendWeight : unreal.Float32;
  
  /**
    The type of camera
  **/
  public var ProjectionMode : unreal.ECameraProjectionMode;
  
  /**
    If true, account for the field of view angle when computing which level of detail to use for meshes.
  **/
  public var bUseFieldOfViewForLOD : Bool;
  
  /**
    If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.
  **/
  public var bConstrainAspectRatio : Bool;
  
  /**
    Aspect Ratio (Width/Height); ignored unless bConstrainAspectRatio is true
  **/
  public var AspectRatio : unreal.Float32;
  
  /**
    The far plane distance of the orthographic view (in world units)
  **/
  public var OrthoFarClipPlane : unreal.Float32;
  
  /**
    The near plane distance of the orthographic view (in world units)
  **/
  public var OrthoNearClipPlane : unreal.Float32;
  
  /**
    The desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  public var OrthoWidth : unreal.Float32;
  
  /**
    The field of view (in degrees) in perspective mode (ignored in Orthographic mode)
  **/
  public var FOV : unreal.Float32;
  
  /**
    Rotation
  **/
  public var Rotation : unreal.FRotator;
  
  /**
    Location
  **/
  public var Location : unreal.FVector;
  
}
