/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  WARNING: This type is defined as NoExport by UHT. It will be empty because of it
  
  Flags that apply to a destructible actor.
**/
@:glueCppIncludes("Engine/DestructibleMesh.h")
@:noCopy @:noEquals @:uextern extern class FDestructibleParametersFlag {
  
  /**
    If initially static, the destructible will become part of an extended support structure if it is
    in contact with another static destructible that also has this flag set.
  **/
  public var bFormExtendedStructures : Bool;
  
  /**
    If set, the ValidBounds field of NxDestructibleParameters will be used.  These bounds are translated
    (but not scaled or rotated) to the origin of the destructible actor.  If a chunk or chunk island moves
    outside of those bounds, it is destroyed.
  **/
  public var bUseValidBounds : Bool;
  
  /**
    If set, the NxDestructibleActor::rayCast function will search within the nearest visible chunk hit
    for collisions with child chunks.  This is used to get a better raycast position and normal, in
    case the parent collision volume does not tightly fit the graphics mesh.  The returned chunk index
    will always be that of the visible parent that is intersected, however.
  **/
  public var bAccurateRaycasts : Bool;
  
  /**
    If set, the smallest chunks may be further broken down, either by fluid crumbles (if a crumble particle
    system is specified in the NxDestructibleActorDesc), or by simply removing the chunk if no crumble
    particle system is specified.  Note: the "smallest chunks" are normally defined to be the deepest level
    of the fracture hierarchy.  However, they may be taken from higher levels of the hierarchy if
    NxModuleDestructible::setMaxChunkDepthOffset is called with a non-zero value.
  **/
  public var bCrumbleSmallestChunks : Bool;
  
  /**
    Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
    will be removed if they separate too far from their origins.  The maxSeparation is a value between
    NxDestructibleParameters::debrisMaxSeparationMin and NxDestructibleParameters::debrisMaxSeparationMax,
    based upon the destructible module's LOD setting.
  **/
  public var bDebrisMaxSeparation : Bool;
  
  /**
    Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
    will time out.  The lifetime is a value between NxDestructibleParameters::debrisLifetimeMin and
    NxDestructibleParameters::debrisLifetimeMax, based upon the destructible module's LOD setting.
  **/
  public var bDebrisTimeout : Bool;
  
  /**
    If set, then chunks which overlap the Scene's static geometry will have environmental support in
    static destructibles.
    
    Note: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as
    "support" chunks AND overlap the Scene's static geometry in order to be environmentally supported.
  **/
  public var bWorldSupport : Bool;
  
  /**
    If set, then chunks which are tagged as "support" chunks (via NxDestructibleChunkDesc::isSupportChunk)
    will have environmental support in static destructibles.
    
    Note: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as
    "support" chunks AND overlap the Scene's static geometry in order to be environmentally supported.
  **/
  public var bAssetDefinedSupport : Bool;
  
  /**
    If set, chunks will "remember" damage applied to them, so that many applications of a damage amount
    below damageThreshold will eventually fracture the chunk.  If not set, a single application of
    damage must exceed damageThreshold in order to fracture the chunk.
  **/
  public var bAccumulateDamage : Bool;
  
}
